[
    {
        "id": "1054d534edb1e6d2",
        "type": "tab",
        "label": "Flux 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4e15b227a3c64485",
        "type": "worldmap",
        "z": "1054d534edb1e6d2",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "18",
        "layer": "OSMC",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/map",
        "overlist": "",
        "maplist": "OSMG,OSMC,EsriC,EsriS,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1110,
        "y": 400,
        "wires": []
    },
    {
        "id": "b87693c2fc6d3ccb",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "lon",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.lon",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 40,
        "wires": []
    },
    {
        "id": "8a413894de5d21f7",
        "type": "mqtt in",
        "z": "1054d534edb1e6d2",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "d2fab9af85b09697",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "cc18d85490028448",
                "b8f37299431cfb2a",
                "431ddb4a39c3c348"
            ]
        ]
    },
    {
        "id": "cc18d85490028448",
        "type": "function",
        "z": "1054d534edb1e6d2",
        "name": "JSON parcer",
        "func": "var msgPayload = msg.payload;\n\n// Vérifier si le message a une propriété \"uplink_message\"\nif (msgPayload.hasOwnProperty(\"uplink_message\")) {\n    // Vérifier si le message contient un payload décodé\n    if (msgPayload.uplink_message.hasOwnProperty(\"locations\") && msgPayload.uplink_message.locations.hasOwnProperty(\"frm-payload\")) {\n        // Récupérer les valeurs de latitude et de longitude du payload\n        var latitude = msgPayload.uplink_message.locations[\"frm-payload\"].latitude;\n        var longitude = msgPayload.uplink_message.locations[\"frm-payload\"].longitude;\n\n        // Créer un nouvel objet avec les valeurs souhaitées\n        var newPayload = {\n            \"name\": \"device1\",\n            \"lat\": latitude,\n            \"lon\": longitude,\n            \"iconColor\": \"blue\",\n            \"icon\": \"car\"\n        };\n\n        // Ajouter le nouvel objet au message\n        msg.payload = newPayload;\n\n        // Envoyer le message modifié\n        return msg;\n    }\n}\n\n// Si la structure du message ne correspond pas ou si les données de localisation ne sont pas disponibles, ne rien faire\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "b87693c2fc6d3ccb",
                "9d5e3420b2e9289f",
                "3144f69ca6d17041",
                "89371ef492c925d7",
                "3c41b3ca1526d666",
                "4e15b227a3c64485",
                "49d12da7ce533e7d"
            ]
        ]
    },
    {
        "id": "b8f37299431cfb2a",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "MQTT Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "9d5e3420b2e9289f",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "lat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.lat",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "3144f69ca6d17041",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "name",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.name",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "89371ef492c925d7",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "iconColor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.iconColor",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 240,
        "wires": []
    },
    {
        "id": "3c41b3ca1526d666",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "icon",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.icon",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 300,
        "wires": []
    },
    {
        "id": "49d12da7ce533e7d",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "final payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 480,
        "wires": []
    },
    {
        "id": "6945d75a33397188",
        "type": "mqtt out",
        "z": "1054d534edb1e6d2",
        "name": "",
        "topic": "v3/sae-app@ttn/devices/eui-70b3d549973befa2/down/push",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d2fab9af85b09697",
        "x": 740,
        "y": 560,
        "wires": []
    },
    {
        "id": "431ddb4a39c3c348",
        "type": "function",
        "z": "1054d534edb1e6d2",
        "name": "function 2",
        "func": "// Extraire les valeurs de latitude et de longitude du payload\nconst latitude = msg.payload.uplink_message.locations[\"frm-payload\"].latitude;\nconst longitude = msg.payload.uplink_message.locations[\"frm-payload\"].longitude;\n\n// Créer une chaîne de texte avec les coordonnées reçues\nconst coordinates = `Coordonnees recues : Latitude ${latitude}, Longitude ${longitude}`;\n\n// Convertir la chaîne de texte en base64\nconst base64data = Buffer.from(coordinates).toString('base64');\n\n// Créer le nouvel objet payload avec les données encodées\nmsg.payload = {\n    \"downlinks\": [{\n        \"f_port\": 15,\n        \"frm_payload\": base64data,\n        \"priority\": \"NORMAL\"\n    }]\n};\n\n// Retourner le message modifié\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 420,
        "wires": [
            [
                "6945d75a33397188",
                "f965f0a38ac4bccc"
            ]
        ]
    },
    {
        "id": "f965f0a38ac4bccc",
        "type": "debug",
        "z": "1054d534edb1e6d2",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 660,
        "wires": []
    },
    {
        "id": "d2fab9af85b09697",
        "type": "mqtt-broker",
        "name": "TTN",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]